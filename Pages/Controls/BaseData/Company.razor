@page "/pages/controls/company"
@using Mazinger.DataAccess.Base
@inject Func<string, ITransient, object> ResolveNamed

<TableQueryItem @bind-TableItem=_tc PageWidth=400></TableQueryItem>
<TableGrid @bind-TableItem=_tc></TableGrid>
<TableDialog @bind-TableItem=_tc></TableDialog>
<MySnackbars></MySnackbars>

@code {
    private IDataAccessInterface? Db;
    private TableItemClass _tc;
    protected override async void OnInitialized()
    {
        Db = ResolveNamed(nameof(CompanyDataAccess), default) as IDataAccessInterface;
        _tc = new TableItemClass
            {
                Headers = Db.TableHeader(),
                QueryItems = Db.TableQueryItem(),
                QueryFunction = Db.QueryFunc,
                Buttons = new List<TableButtonClass>
                {
                    new TableButtonClass{
                        Name="修改",
                        Color="primary",
                        Icon="mdi-file-settings-outline",
                        EventCallback = EventCallback.Factory.Create<object?>(this, _obj =>
                        {
                            _tc.SetInputItemsVal<CompanyEntity>(_obj);
                            _tc.InputIsNew = false;
                            _tc.InputPageShow = true;
                        })
                    },

                    new TableButtonClass{
                        Name="删除",
                        Icon="mdi-delete-forever-outline",
                        EventCallback = EventCallback.Factory.Create<object?>(this, _obj =>
                        {
                            var _target = _obj.Adapt<CompanyEntity>();
                            _tc.CallDialog(
                                $"要删除单位【{_target.comName}】吗？",
                                EventCallback.Factory.Create(this,async () =>
                                {
                                    await Db.BDA_GetSql().DeleteCom(_target.comCode);
                                    _tc.DialogShow = false;
                                    await InvokeAsync(StateHasChanged);
                                    await _tc.QueryFunc.InvokeAsync(1);
                                    MySnackbars.Enqueue(AlertTypes.Success, $"删除{_tc.InputPageName}信息成功！");
                                }),
                                500,true
                            );
                        })
                    },
                },
                QueryFunc = EventCallback.Factory.Create<int>(this, async value =>
                {
                    _tc.StartLoading();
                    await InvokeAsync(StateHasChanged);
                    _tc.ExecQuery(value);
                    await InvokeAsync(StateHasChanged);
                }),

                InputPageName = "单位",
                InputEntity = Db.InputEntity(),
                InputItems = Db.DefaultInputItems(),
                SaveFunc = EventCallback.Factory.Create(this, async () =>
                {
                    await Db.SaveFunc(_tc.InputItems, _tc.InputIsNew);
                    await InvokeAsync(StateHasChanged);
                }),
            };

        await _tc.QueryFunc.InvokeAsync(1);
        base.OnInitialized();
    }

}
